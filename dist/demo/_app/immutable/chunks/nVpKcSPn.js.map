{"version":3,"file":"nVpKcSPn.js","sources":["../../../../../../node_modules/svelte/src/internal/client/dom/elements/bindings/input.js","../../../../../../node_modules/svelte/src/internal/client/dom/legacy/event-modifiers.js","../../../../../../src/lib/llm/providers.ts","../../../../../../src/lib/components/settings/LlmSettingsPanel.svelte"],"sourcesContent":["/** @import { Batch } from '../../../reactivity/batch.js' */\nimport { DEV } from 'esm-env';\nimport { render_effect, teardown } from '../../../reactivity/effects.js';\nimport { listen_to_event_and_reset_event } from './shared.js';\nimport * as e from '../../../errors.js';\nimport { is } from '../../../proxy.js';\nimport { queue_micro_task } from '../../task.js';\nimport { hydrating } from '../../hydration.js';\nimport { tick, untrack } from '../../../runtime.js';\nimport { is_runes } from '../../../context.js';\nimport { current_batch, previous_batch } from '../../../reactivity/batch.js';\n\n/**\n * @param {HTMLInputElement} input\n * @param {() => unknown} get\n * @param {(value: unknown) => void} set\n * @returns {void}\n */\nexport function bind_value(input, get, set = get) {\n\tvar batches = new WeakSet();\n\n\tlisten_to_event_and_reset_event(input, 'input', async (is_reset) => {\n\t\tif (DEV && input.type === 'checkbox') {\n\t\t\t// TODO should this happen in prod too?\n\t\t\te.bind_invalid_checkbox_value();\n\t\t}\n\n\t\t/** @type {any} */\n\t\tvar value = is_reset ? input.defaultValue : input.value;\n\t\tvalue = is_numberlike_input(input) ? to_number(value) : value;\n\t\tset(value);\n\n\t\tif (current_batch !== null) {\n\t\t\tbatches.add(current_batch);\n\t\t}\n\n\t\t// Because `{#each ...}` blocks work by updating sources inside the flush,\n\t\t// we need to wait a tick before checking to see if we should forcibly\n\t\t// update the input and reset the selection state\n\t\tawait tick();\n\n\t\t// Respect any validation in accessors\n\t\tif (value !== (value = get())) {\n\t\t\tvar start = input.selectionStart;\n\t\t\tvar end = input.selectionEnd;\n\n\t\t\t// the value is coerced on assignment\n\t\t\tinput.value = value ?? '';\n\n\t\t\t// Restore selection\n\t\t\tif (end !== null) {\n\t\t\t\tinput.selectionStart = start;\n\t\t\t\tinput.selectionEnd = Math.min(end, input.value.length);\n\t\t\t}\n\t\t}\n\t});\n\n\tif (\n\t\t// If we are hydrating and the value has since changed,\n\t\t// then use the updated value from the input instead.\n\t\t(hydrating && input.defaultValue !== input.value) ||\n\t\t// If defaultValue is set, then value == defaultValue\n\t\t// TODO Svelte 6: remove input.value check and set to empty string?\n\t\t(untrack(get) == null && input.value)\n\t) {\n\t\tset(is_numberlike_input(input) ? to_number(input.value) : input.value);\n\n\t\tif (current_batch !== null) {\n\t\t\tbatches.add(current_batch);\n\t\t}\n\t}\n\n\trender_effect(() => {\n\t\tif (DEV && input.type === 'checkbox') {\n\t\t\t// TODO should this happen in prod too?\n\t\t\te.bind_invalid_checkbox_value();\n\t\t}\n\n\t\tvar value = get();\n\n\t\tif (input === document.activeElement) {\n\t\t\t// we need both, because in non-async mode, render effects run before previous_batch is set\n\t\t\tvar batch = /** @type {Batch} */ (previous_batch ?? current_batch);\n\n\t\t\t// Never rewrite the contents of a focused input. We can get here if, for example,\n\t\t\t// an update is deferred because of async work depending on the input:\n\t\t\t//\n\t\t\t// <input bind:value={query}>\n\t\t\t// <p>{await find(query)}</p>\n\t\t\tif (batches.has(batch)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (is_numberlike_input(input) && value === to_number(input.value)) {\n\t\t\t// handles 0 vs 00 case (see https://github.com/sveltejs/svelte/issues/9959)\n\t\t\treturn;\n\t\t}\n\n\t\tif (input.type === 'date' && !value && !input.value) {\n\t\t\t// Handles the case where a temporarily invalid date is set (while typing, for example with a leading 0 for the day)\n\t\t\t// and prevents this state from clearing the other parts of the date input (see https://github.com/sveltejs/svelte/issues/7897)\n\t\t\treturn;\n\t\t}\n\n\t\t// don't set the value of the input if it's the same to allow\n\t\t// minlength to work properly\n\t\tif (value !== input.value) {\n\t\t\t// @ts-expect-error the value is coerced on assignment\n\t\t\tinput.value = value ?? '';\n\t\t}\n\t});\n}\n\n/** @type {Set<HTMLInputElement[]>} */\nconst pending = new Set();\n\n/**\n * @param {HTMLInputElement[]} inputs\n * @param {null | [number]} group_index\n * @param {HTMLInputElement} input\n * @param {() => unknown} get\n * @param {(value: unknown) => void} set\n * @returns {void}\n */\nexport function bind_group(inputs, group_index, input, get, set = get) {\n\tvar is_checkbox = input.getAttribute('type') === 'checkbox';\n\tvar binding_group = inputs;\n\n\t// needs to be let or related code isn't treeshaken out if it's always false\n\tlet hydration_mismatch = false;\n\n\tif (group_index !== null) {\n\t\tfor (var index of group_index) {\n\t\t\t// @ts-expect-error\n\t\t\tbinding_group = binding_group[index] ??= [];\n\t\t}\n\t}\n\n\tbinding_group.push(input);\n\n\tlisten_to_event_and_reset_event(\n\t\tinput,\n\t\t'change',\n\t\t() => {\n\t\t\t// @ts-ignore\n\t\t\tvar value = input.__value;\n\n\t\t\tif (is_checkbox) {\n\t\t\t\tvalue = get_binding_group_value(binding_group, value, input.checked);\n\t\t\t}\n\n\t\t\tset(value);\n\t\t},\n\t\t// TODO better default value handling\n\t\t() => set(is_checkbox ? [] : null)\n\t);\n\n\trender_effect(() => {\n\t\tvar value = get();\n\n\t\t// If we are hydrating and the value has since changed, then use the update value\n\t\t// from the input instead.\n\t\tif (hydrating && input.defaultChecked !== input.checked) {\n\t\t\thydration_mismatch = true;\n\t\t\treturn;\n\t\t}\n\n\t\tif (is_checkbox) {\n\t\t\tvalue = value || [];\n\t\t\t// @ts-ignore\n\t\t\tinput.checked = value.includes(input.__value);\n\t\t} else {\n\t\t\t// @ts-ignore\n\t\t\tinput.checked = is(input.__value, value);\n\t\t}\n\t});\n\n\tteardown(() => {\n\t\tvar index = binding_group.indexOf(input);\n\n\t\tif (index !== -1) {\n\t\t\tbinding_group.splice(index, 1);\n\t\t}\n\t});\n\n\tif (!pending.has(binding_group)) {\n\t\tpending.add(binding_group);\n\n\t\tqueue_micro_task(() => {\n\t\t\t// necessary to maintain binding group order in all insertion scenarios\n\t\t\tbinding_group.sort((a, b) => (a.compareDocumentPosition(b) === 4 ? -1 : 1));\n\t\t\tpending.delete(binding_group);\n\t\t});\n\t}\n\n\tqueue_micro_task(() => {\n\t\tif (hydration_mismatch) {\n\t\t\tvar value;\n\n\t\t\tif (is_checkbox) {\n\t\t\t\tvalue = get_binding_group_value(binding_group, value, input.checked);\n\t\t\t} else {\n\t\t\t\tvar hydration_input = binding_group.find((input) => input.checked);\n\t\t\t\t// @ts-ignore\n\t\t\t\tvalue = hydration_input?.__value;\n\t\t\t}\n\n\t\t\tset(value);\n\t\t}\n\t});\n}\n\n/**\n * @param {HTMLInputElement} input\n * @param {() => unknown} get\n * @param {(value: unknown) => void} set\n * @returns {void}\n */\nexport function bind_checked(input, get, set = get) {\n\tlisten_to_event_and_reset_event(input, 'change', (is_reset) => {\n\t\tvar value = is_reset ? input.defaultChecked : input.checked;\n\t\tset(value);\n\t});\n\n\tif (\n\t\t// If we are hydrating and the value has since changed,\n\t\t// then use the update value from the input instead.\n\t\t(hydrating && input.defaultChecked !== input.checked) ||\n\t\t// If defaultChecked is set, then checked == defaultChecked\n\t\tuntrack(get) == null\n\t) {\n\t\tset(input.checked);\n\t}\n\n\trender_effect(() => {\n\t\tvar value = get();\n\t\tinput.checked = Boolean(value);\n\t});\n}\n\n/**\n * @template V\n * @param {Array<HTMLInputElement>} group\n * @param {V} __value\n * @param {boolean} checked\n * @returns {V[]}\n */\nfunction get_binding_group_value(group, __value, checked) {\n\t/** @type {Set<V>} */\n\tvar value = new Set();\n\n\tfor (var i = 0; i < group.length; i += 1) {\n\t\tif (group[i].checked) {\n\t\t\t// @ts-ignore\n\t\t\tvalue.add(group[i].__value);\n\t\t}\n\t}\n\n\tif (!checked) {\n\t\tvalue.delete(__value);\n\t}\n\n\treturn Array.from(value);\n}\n\n/**\n * @param {HTMLInputElement} input\n */\nfunction is_numberlike_input(input) {\n\tvar type = input.type;\n\treturn type === 'number' || type === 'range';\n}\n\n/**\n * @param {string} value\n */\nfunction to_number(value) {\n\treturn value === '' ? null : +value;\n}\n\n/**\n * @param {HTMLInputElement} input\n * @param {() => FileList | null} get\n * @param {(value: FileList | null) => void} set\n */\nexport function bind_files(input, get, set = get) {\n\tlisten_to_event_and_reset_event(input, 'change', () => {\n\t\tset(input.files);\n\t});\n\n\tif (\n\t\t// If we are hydrating and the value has since changed,\n\t\t// then use the updated value from the input instead.\n\t\thydrating &&\n\t\tinput.files\n\t) {\n\t\tset(input.files);\n\t}\n\n\trender_effect(() => {\n\t\tinput.files = get();\n\t});\n}\n","import { noop } from '../../../shared/utils.js';\nimport { user_pre_effect } from '../../reactivity/effects.js';\nimport { on } from '../elements/events.js';\n\n/**\n * Substitute for the `trusted` event modifier\n * @deprecated\n * @param {(event: Event, ...args: Array<unknown>) => void} fn\n * @returns {(event: Event, ...args: unknown[]) => void}\n */\nexport function trusted(fn) {\n\treturn function (...args) {\n\t\tvar event = /** @type {Event} */ (args[0]);\n\t\tif (event.isTrusted) {\n\t\t\t// @ts-ignore\n\t\t\tfn?.apply(this, args);\n\t\t}\n\t};\n}\n\n/**\n * Substitute for the `self` event modifier\n * @deprecated\n * @param {(event: Event, ...args: Array<unknown>) => void} fn\n * @returns {(event: Event, ...args: unknown[]) => void}\n */\nexport function self(fn) {\n\treturn function (...args) {\n\t\tvar event = /** @type {Event} */ (args[0]);\n\t\t// @ts-ignore\n\t\tif (event.target === this) {\n\t\t\t// @ts-ignore\n\t\t\tfn?.apply(this, args);\n\t\t}\n\t};\n}\n\n/**\n * Substitute for the `stopPropagation` event modifier\n * @deprecated\n * @param {(event: Event, ...args: Array<unknown>) => void} fn\n * @returns {(event: Event, ...args: unknown[]) => void}\n */\nexport function stopPropagation(fn) {\n\treturn function (...args) {\n\t\tvar event = /** @type {Event} */ (args[0]);\n\t\tevent.stopPropagation();\n\t\t// @ts-ignore\n\t\treturn fn?.apply(this, args);\n\t};\n}\n\n/**\n * Substitute for the `once` event modifier\n * @deprecated\n * @param {(event: Event, ...args: Array<unknown>) => void} fn\n * @returns {(event: Event, ...args: unknown[]) => void}\n */\nexport function once(fn) {\n\tvar ran = false;\n\n\treturn function (...args) {\n\t\tif (ran) return;\n\t\tran = true;\n\n\t\t// @ts-ignore\n\t\treturn fn?.apply(this, args);\n\t};\n}\n\n/**\n * Substitute for the `stopImmediatePropagation` event modifier\n * @deprecated\n * @param {(event: Event, ...args: Array<unknown>) => void} fn\n * @returns {(event: Event, ...args: unknown[]) => void}\n */\nexport function stopImmediatePropagation(fn) {\n\treturn function (...args) {\n\t\tvar event = /** @type {Event} */ (args[0]);\n\t\tevent.stopImmediatePropagation();\n\t\t// @ts-ignore\n\t\treturn fn?.apply(this, args);\n\t};\n}\n\n/**\n * Substitute for the `preventDefault` event modifier\n * @deprecated\n * @param {(event: Event, ...args: Array<unknown>) => void} fn\n * @returns {(event: Event, ...args: unknown[]) => void}\n */\nexport function preventDefault(fn) {\n\treturn function (...args) {\n\t\tvar event = /** @type {Event} */ (args[0]);\n\t\tevent.preventDefault();\n\t\t// @ts-ignore\n\t\treturn fn?.apply(this, args);\n\t};\n}\n\n/**\n * Substitute for the `passive` event modifier, implemented as an action\n * @deprecated\n * @param {HTMLElement} node\n * @param {[event: string, handler: () => EventListener]} options\n */\nexport function passive(node, [event, handler]) {\n\tuser_pre_effect(() => {\n\t\treturn on(node, event, handler() ?? noop, {\n\t\t\tpassive: true\n\t\t});\n\t});\n}\n\n/**\n * Substitute for the `nonpassive` event modifier, implemented as an action\n * @deprecated\n * @param {HTMLElement} node\n * @param {[event: string, handler: () => EventListener]} options\n */\nexport function nonpassive(node, [event, handler]) {\n\tuser_pre_effect(() => {\n\t\treturn on(node, event, handler() ?? noop, {\n\t\t\tpassive: false\n\t\t});\n\t});\n}\n","export type ProviderId = string;\nexport type ProviderKind = 'ollama' | 'gemini';\n\nexport type ProviderFieldType = 'text' | 'password' | 'url' | 'number';\n\nexport interface ProviderFieldDefinition {\n  name: string;\n  label: string;\n  type: ProviderFieldType;\n  placeholder?: string;\n  required?: boolean;\n  secret?: boolean;\n  helperText?: string;\n}\n\nexport interface ProviderTemplate {\n  kind: ProviderKind;\n  label: string;\n  description: string;\n  fields: ProviderFieldDefinition[];\n  defaultLabel: string;\n}\n\nexport interface ProviderConfig {\n  id: ProviderId;\n  label: string;\n  kind: ProviderKind;\n  description?: string;\n  settings: Record<string, string>;\n}\n\nexport interface ProviderOption {\n  id: ProviderId;\n  label: string;\n  description?: string;\n  kind: ProviderKind;\n}\n\nexport const DEFAULT_PROVIDER_ID = 'ollama-local';\n\nexport const providerTemplates: ProviderTemplate[] = [\n  {\n    kind: 'ollama',\n    label: 'Ollama',\n    description: 'Connect to an Ollama instance running locally or remotely.',\n    defaultLabel: 'Local Ollama',\n    fields: [\n      {\n        name: 'baseUrl',\n        label: 'Base URL',\n        type: 'url',\n        placeholder: 'http://localhost',\n        required: true,\n        helperText: 'Protocol and host for the Ollama server.'\n      },\n      {\n        name: 'port',\n        label: 'Port',\n        type: 'number',\n        placeholder: '11434',\n        helperText: 'Leave blank to use the port in the base URL.'\n      }\n    ]\n  },\n  {\n    kind: 'gemini',\n    label: 'Gemini',\n    description: 'Google Gemini model access via API key.',\n    defaultLabel: 'Gemini',\n    fields: [\n      {\n        name: 'apiKey',\n        label: 'API Key',\n        type: 'password',\n        placeholder: 'GEMINI_API_KEY',\n        required: true,\n        secret: true\n      }\n    ]\n  }\n];\n\nexport const defaultProviders: ProviderConfig[] = [\n  {\n    id: DEFAULT_PROVIDER_ID,\n    label: 'Local Ollama',\n    kind: 'ollama',\n    description: 'Connects to a local Ollama instance (http://localhost:11434).',\n    settings: {\n      baseUrl: 'http://localhost',\n      port: '11434'\n    }\n  }\n];\n\nexport const defaultProvider = defaultProviders[0];\n\nexport const providerOptions = defaultProviders.map<ProviderOption>((provider) => ({\n  id: provider.id,\n  label: provider.label,\n  description: provider.description,\n  kind: provider.kind\n}));\n\nexport const getProviderTemplate = (kind: ProviderKind) =>\n  providerTemplates.find((template) => template.kind === kind);\n\nexport const isProviderKind = (value: string): value is ProviderKind =>\n  providerTemplates.some((template) => template.kind === value);\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import {\n    defaultProvider,\n    providerTemplates,\n    type ProviderConfig,\n    type ProviderId,\n    type ProviderKind,\n    type ProviderTemplate\n  } from '$lib/llm/providers';\n\n  export let variant: 'page' | 'modal' = 'page';\n\n  let providers: ProviderConfig[] = [defaultProvider];\n  let providersLoading = false;\n  let providersError: string | null = null;\n  let computedProvidersError: string | null = null;\n\n  let selectedProviderId: ProviderId = defaultProvider.id;\n  let currentProvider: ProviderConfig = defaultProvider;\n  let availableModels: string[] = [];\n  let selectedModel = '';\n\n  let modelsLoading = false;\n  let modelsError: string | null = null;\n  let loadError: string | null = null;\n  let saveError: string | null = null;\n  let saveStatus: 'idle' | 'saving' | 'saved' = 'idle';\n\n  let newProviderKind: ProviderKind = providerTemplates[0]?.kind ?? 'ollama';\n  let newProviderLabel = '';\n  let newProviderDescription = '';\n  let newProviderSettings: Record<string, string> = {};\n  let createStatus: 'idle' | 'saving' | 'success' = 'idle';\n  let createError: string | null = null;\n  let removingProviderId: ProviderId | null = null;\n  let removeStatus: 'idle' | 'removing' | 'success' = 'idle';\n  let removeError: string | null = null;\n  let ttsHasApiKey = false;\n  let ttsInput = '';\n  let ttsStatus: 'idle' | 'saving' | 'success' = 'idle';\n  let ttsError: string | null = null;\n  let ttsPendingAction: 'save' | 'clear' | null = null;\n\n  const loadProviders = async () => {\n    providersLoading = true;\n    providersError = null;\n\n    try {\n      const response = await fetch('/api/providers');\n      const data = await response.json().catch(() => null);\n\n      if (!response.ok || !data) {\n        throw new Error(data?.error ?? `Unable to load providers (${response.status})`);\n      }\n\n      const list = Array.isArray(data.providers) ? (data.providers as ProviderConfig[]) : [];\n\n      providers = list.length ? list : [defaultProvider];\n\n      if (!providers.some((provider) => provider.id === selectedProviderId)) {\n        selectedProviderId = providers[0]?.id ?? defaultProvider.id;\n      }\n    } catch (error) {\n      providersError = error instanceof Error ? error.message : 'Unable to load providers';\n      providers = [defaultProvider];\n      selectedProviderId = defaultProvider.id;\n    } finally {\n      providersLoading = false;\n    }\n  };\n\n  const loadSettings = async () => {\n    loadError = null;\n\n    try {\n      const response = await fetch('/api/settings');\n      const data = await response.json().catch(() => null);\n\n      if (!response.ok || !data) {\n        throw new Error(data?.error ?? `Unable to load settings (${response.status})`);\n      }\n\n      const serverSettings = data.settings;\n      ttsHasApiKey = false;\n      if (serverSettings && typeof serverSettings === 'object') {\n        if (typeof serverSettings.provider === 'string') {\n          const providerExists = providers.some((provider) => provider.id === serverSettings.provider);\n          selectedProviderId = providerExists\n            ? serverSettings.provider\n            : providers[0]?.id ?? defaultProvider.id;\n        }\n        if (typeof serverSettings.model === 'string') {\n          selectedModel = serverSettings.model;\n        }\n\n        const speechSettings = (serverSettings as { tts?: unknown }).tts;\n        if (speechSettings && typeof speechSettings === 'object') {\n          ttsHasApiKey = Boolean(\n            (speechSettings as { hasElevenLabsApiKey?: unknown }).hasElevenLabsApiKey\n          );\n        } else {\n          ttsHasApiKey = false;\n        }\n      }\n    } catch (error) {\n      loadError = error instanceof Error ? error.message : 'Unable to load saved settings';\n      selectedProviderId = providers[0]?.id ?? defaultProvider.id;\n      selectedModel = '';\n      ttsHasApiKey = false;\n    }\n  };\n\n  const loadModels = async (provider: ProviderId) => {\n    modelsLoading = true;\n    modelsError = null;\n\n    try {\n      const response = await fetch(`/api/models/${provider}`);\n      const data = await response.json().catch(() => null);\n\n      if (!response.ok || !data) {\n        throw new Error(data?.error ?? `Unable to load models (${response.status})`);\n      }\n\n      availableModels = Array.isArray(data.models)\n        ? data.models.filter(\n            (name: unknown): name is string => typeof name === 'string' && name.trim().length > 0\n          )\n        : [];\n    } catch (error) {\n      availableModels = [];\n      modelsError = error instanceof Error ? error.message : 'Unable to load models';\n    } finally {\n      modelsLoading = false;\n    }\n  };\n\n  const handleProviderChange = async (provider: ProviderId) => {\n    selectedProviderId = provider;\n    selectedModel = '';\n    await loadModels(provider);\n    selectedModel = availableModels[0] ?? '';\n  };\n\n  const handleSave = async () => {\n    if (!selectedModel) {\n      saveError = 'Select a model before saving.';\n      return;\n    }\n\n    saveStatus = 'saving';\n    saveError = null;\n\n    try {\n      const response = await fetch('/api/settings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ provider: selectedProviderId, model: selectedModel })\n      });\n\n      const data = await response.json().catch(() => null);\n      if (!response.ok || !data) {\n        throw new Error(data?.error ?? `Unable to save settings (${response.status})`);\n      }\n\n      saveStatus = 'saved';\n      setTimeout(() => {\n        saveStatus = 'idle';\n      }, 2000);\n    } catch (error) {\n      saveStatus = 'idle';\n      saveError = error instanceof Error ? error.message : 'Unable to save settings';\n    }\n  };\n\n  const handleTemplateChange = (kind: ProviderKind) => {\n    newProviderKind = kind;\n    newProviderLabel = '';\n    newProviderDescription = '';\n    newProviderSettings = {};\n    createError = null;\n    createStatus = 'idle';\n  };\n\n  const updateNewProviderSetting = (name: string, value: string) => {\n    newProviderSettings = { ...newProviderSettings, [name]: value };\n  };\n\n  const handleCreateProvider = async () => {\n    const template = providerTemplates.find((entry) => entry.kind === newProviderKind);\n    if (!template) {\n      createError = 'Choose a provider type.';\n      return;\n    }\n\n    createStatus = 'saving';\n    createError = null;\n\n    const payloadSettings: Record<string, string> = {};\n    for (const field of template.fields) {\n      const value = (newProviderSettings[field.name] ?? '').trim();\n      if (field.required && !value) {\n        createStatus = 'idle';\n        createError = `${field.label} is required.`;\n        return;\n      }\n      if (value) {\n        payloadSettings[field.name] = value;\n      }\n    }\n\n    try {\n      const response = await fetch('/api/providers', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          kind: newProviderKind,\n          label: newProviderLabel.trim() ? newProviderLabel.trim() : undefined,\n          description: newProviderDescription.trim() ? newProviderDescription.trim() : undefined,\n          settings: payloadSettings\n        })\n      });\n\n      const data = await response.json().catch(() => null);\n      if (!response.ok || !data) {\n        throw new Error(data?.error ?? `Unable to create provider (${response.status})`);\n      }\n\n      const list = Array.isArray(data.providers) ? (data.providers as ProviderConfig[]) : [];\n\n      if (list.length) {\n        providers = list;\n      }\n\n      if (data?.provider?.id) {\n        selectedProviderId = data.provider.id;\n        await loadModels(selectedProviderId);\n        selectedModel = availableModels[0] ?? '';\n      }\n\n      createStatus = 'success';\n      newProviderLabel = '';\n      newProviderDescription = '';\n      newProviderSettings = {};\n      setTimeout(() => {\n        createStatus = 'idle';\n      }, 2000);\n    } catch (error) {\n      createStatus = 'idle';\n      createError = error instanceof Error ? error.message : 'Unable to create provider';\n    }\n  }\n  const handleRemoveProvider = async (providerId: ProviderId) => {\n    if (providerId === defaultProvider.id) {\n      return;\n    }\n\n    removeError = null;\n    removeStatus = 'removing';\n    removingProviderId = providerId;\n\n    try {\n      const response = await fetch(`/api/providers/${encodeURIComponent(providerId)}`, {\n        method: 'DELETE'\n      });\n\n      const data = await response.json().catch(() => null);\n      if (!response.ok || !data) {\n        throw new Error(data?.error ?? `Unable to remove provider (${response.status})`);\n      }\n\n      const list = Array.isArray(data.providers) ? (data.providers as ProviderConfig[]) : [];\n      providers = list.length ? list : [defaultProvider];\n\n      let shouldReloadModels = false;\n      if (!providers.some((provider) => provider.id === selectedProviderId)) {\n        selectedProviderId = providers[0]?.id ?? defaultProvider.id;\n        shouldReloadModels = true;\n      } else if (providerId === selectedProviderId) {\n        shouldReloadModels = true;\n      }\n\n      if (shouldReloadModels && selectedProviderId) {\n        selectedModel = '';\n        await loadModels(selectedProviderId);\n        selectedModel = availableModels[0] ?? '';\n      }\n\n      removeStatus = 'success';\n      setTimeout(() => {\n        removeStatus = 'idle';\n      }, 2000);\n    } catch (error) {\n      removeStatus = 'idle';\n      removeError = error instanceof Error ? error.message : 'Unable to remove provider';\n    } finally {\n      removingProviderId = null;\n    }\n  };\n\n  const updateTtsKey = async (value: string, action: 'save' | 'clear') => {\n    if (ttsStatus === 'saving') {\n      return;\n    }\n\n    ttsError = null;\n    ttsStatus = 'saving';\n    ttsPendingAction = action;\n\n    try {\n      const response = await fetch('/api/settings/tts', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ apiKey: value })\n      });\n\n      const data = await response.json().catch(() => null);\n      if (!response.ok || !data) {\n        throw new Error(data?.error ?? `Unable to update ElevenLabs key (${response.status})`);\n      }\n\n      const hasKey = Boolean(data.settings?.hasElevenLabsApiKey);\n      ttsHasApiKey = hasKey;\n      ttsStatus = 'success';\n      ttsInput = '';\n      setTimeout(() => {\n        ttsStatus = 'idle';\n      }, 2000);\n    } catch (error) {\n      ttsStatus = 'idle';\n      ttsError = error instanceof Error ? error.message : 'Unable to update ElevenLabs API key';\n    } finally {\n      ttsPendingAction = null;\n    }\n  };\n\n  const handleSaveTtsKey = () => {\n    if (!ttsInput.trim()) {\n      return;\n    }\n\n    void updateTtsKey(ttsInput.trim(), 'save');\n  };\n\n  const handleClearTtsKey = () => {\n    if (!ttsHasApiKey) {\n      return;\n    }\n\n    void updateTtsKey('', 'clear');\n  };\n\n  onMount(async () => {\n    await loadProviders();\n    await loadSettings();\n    await loadModels(selectedProviderId);\n\n    if (!selectedModel || !availableModels.includes(selectedModel)) {\n      selectedModel = availableModels[0] ?? '';\n    }\n  });\n\n  $:\n    currentProvider =\n      providers.find((provider) => provider.id === selectedProviderId) ?? providers[0] ?? defaultProvider;\n\n  $:\n    computedProvidersError = providersError ?? (\n      providers.length === 0 && !providersLoading\n        ? 'No providers configured. Create one below to continue.'\n        : null\n    );\n\n  let selectedProviderTemplate: ProviderTemplate | null = null;\n\n  $:\n    selectedProviderTemplate =\n      providerTemplates.find((template) => template.kind === newProviderKind) ?? providerTemplates[0] ?? null;\n\n  const resolveFieldInputType = (type: string) => {\n    switch (type) {\n      case 'password':\n        return 'password';\n      case 'number':\n        return 'number';\n      case 'url':\n        return 'url';\n      default:\n        return 'text';\n    }\n  };\n</script>\n\n<main class=\"settings-layout\" data-variant={variant}>\n  <section class=\"panel\">\n    <h1>LLM Settings</h1>\n    <p class=\"intro\">\n      Choose the default provider and model for the chat experience. Configure additional providers below as\n      needed.\n    </p>\n\n    {#if loadError}\n      <p class=\"error\">{loadError}</p>\n    {/if}\n\n    <form on:submit|preventDefault={handleSave} class=\"stack\">\n      <div class=\"field\">\n        <label for=\"provider\">Provider</label>\n        <select\n          id=\"provider\"\n          bind:value={selectedProviderId}\n          on:change={() => handleProviderChange(selectedProviderId)}\n          disabled={providersLoading || !providers.length}\n        >\n          {#each providers as option (option.id)}\n            <option value={option.id}>{option.label}</option>\n          {/each}\n        </select>\n        {#if providersLoading}\n          <p class=\"hint\">Loading providers…</p>\n        {:else if computedProvidersError}\n          <p class=\"error\">{computedProvidersError}</p>\n        {:else if currentProvider?.description}\n          <p class=\"hint\">{currentProvider.description}</p>\n        {/if}\n      </div>\n\n      <div class=\"field\">\n        <label for=\"model\">Model</label>\n        <select\n          id=\"model\"\n          bind:value={selectedModel}\n          disabled={modelsLoading || !availableModels.length}\n        >\n          {#each availableModels as modelName (modelName)}\n            <option value={modelName}>{modelName}</option>\n          {/each}\n        </select>\n        {#if modelsLoading}\n          <p class=\"hint\">Loading models…</p>\n        {:else if modelsError}\n          <p class=\"error\">{modelsError}</p>\n        {:else if !availableModels.length}\n          <p class=\"hint\">No models found. Check your provider configuration.</p>\n        {/if}\n      </div>\n\n      {#if saveError}\n        <p class=\"error\">{saveError}</p>\n      {/if}\n\n      <button type=\"submit\" disabled={saveStatus === 'saving' || modelsLoading || providersLoading}>\n        {#if saveStatus === 'saving'}\n          Saving…\n        {:else}\n          Save Preferences\n        {/if}\n      </button>\n\n      {#if saveStatus === 'saved'}\n        <p class=\"success\">Preferences saved.</p>\n      {/if}\n    </form>\n  </section>\n\n  <section class=\"panel\">\n    <h2>Speech Settings</h2>\n    <p class=\"intro\">\n      Configure ElevenLabs text-to-speech by adding your API key. Keys are stored securely and never exposed in\n      client-side code.\n    </p>\n\n    <form on:submit|preventDefault={handleSaveTtsKey} class=\"stack\">\n      <div class=\"field\">\n        <label for=\"elevenlabs-api-key\">ElevenLabs API Key</label>\n        <input\n          id=\"elevenlabs-api-key\"\n          type=\"password\"\n          bind:value={ttsInput}\n          placeholder={ttsHasApiKey ? 'Key stored. Enter a new key to replace it.' : 'sk_...'}\n          autocomplete=\"off\"\n        />\n        {#if ttsHasApiKey}\n          <p class=\"hint\">A key is stored. Enter a new key to replace it or clear it below.</p>\n        {:else}\n          <p class=\"hint\">Provide an ElevenLabs API key to enable voice responses.</p>\n        {/if}\n      </div>\n\n      {#if ttsError}\n        <p class=\"error\">{ttsError}</p>\n      {/if}\n\n      <div class=\"button-row\">\n        <button type=\"submit\" disabled={ttsStatus === 'saving' || !ttsInput.trim()}>\n          {#if ttsStatus === 'saving' && ttsPendingAction === 'save'}\n            Saving…\n          {:else}\n            Save Key\n          {/if}\n        </button>\n        <button\n          type=\"button\"\n          class=\"secondary\"\n          on:click={handleClearTtsKey}\n          disabled={ttsStatus === 'saving' || !ttsHasApiKey}\n        >\n          {#if ttsStatus === 'saving' && ttsPendingAction === 'clear'}\n            Clearing…\n          {:else}\n            Clear Stored Key\n          {/if}\n        </button>\n      </div>\n\n      {#if ttsStatus === 'success'}\n        <p class=\"success\">Speech settings updated.</p>\n      {/if}\n    </form>\n  </section>\n\n  <section class=\"panel\">\n    <h2>Add Provider</h2>\n    <p class=\"intro\">\n      Create additional provider connections. Required fields are specific to the provider type, such as base\n      URLs for Ollama or API keys for Gemini.\n    </p>\n\n    <form on:submit|preventDefault={handleCreateProvider} class=\"stack\">\n      <div class=\"field\">\n        <label for=\"provider-kind\">Provider Type</label>\n        <select\n          id=\"provider-kind\"\n          bind:value={newProviderKind}\n          on:change={(event) => handleTemplateChange((event.currentTarget as HTMLSelectElement).value as ProviderKind)}\n        >\n          {#each providerTemplates as template (template.kind)}\n            <option value={template.kind}>{template.label}</option>\n          {/each}\n        </select>\n      </div>\n\n      <div class=\"field\">\n        <label for=\"provider-name\">Display Name</label>\n        <input\n          id=\"provider-name\"\n          type=\"text\"\n          placeholder=\"My Provider\"\n          bind:value={newProviderLabel}\n        />\n      </div>\n\n      <div class=\"field\">\n        <label for=\"provider-description\">Description</label>\n        <input\n          id=\"provider-description\"\n          type=\"text\"\n          placeholder=\"Optional description\"\n          bind:value={newProviderDescription}\n        />\n      </div>\n\n      {#if selectedProviderTemplate}\n        {#each selectedProviderTemplate.fields as field (field.name)}\n          <div class=\"field\">\n            <label for={`provider-field-${field.name}`}>{field.label}</label>\n            <input\n              id={`provider-field-${field.name}`}\n              type={resolveFieldInputType(field.type)}\n              placeholder={field.placeholder}\n              value={newProviderSettings[field.name] ?? ''}\n              on:input={(event) =>\n                updateNewProviderSetting(field.name, (event.currentTarget as HTMLInputElement).value)\n              }\n            />\n            {#if field.helperText}\n              <p class=\"hint\">{field.helperText}</p>\n            {/if}\n          </div>\n        {/each}\n      {/if}\n\n      {#if createError}\n        <p class=\"error\">{createError}</p>\n      {/if}\n\n      <button type=\"submit\" class=\"secondary\" disabled={createStatus === 'saving'}>\n        {#if createStatus === 'saving'}\n          Adding…\n        {:else}\n          Add Provider\n        {/if}\n      </button>\n\n      {#if createStatus === 'success'}\n        <p class=\"success\">Provider added.</p>\n      {/if}\n    </form>\n  </section>\n\n  <section class=\"panel\">\n    <h2>Configured Providers</h2>\n    <p class=\"intro\">Review the providers currently available to the chat experience.</p>\n\n    {#if removeError}\n      <p class=\"error\">{removeError}</p>\n    {:else if removeStatus === 'success'}\n      <p class=\"success\">Provider removed.</p>\n    {/if}\n\n    <ul class=\"provider-list\">\n      {#each providers as provider (provider.id)}\n        <li>\n          <div class=\"provider-header\">\n            <span class=\"provider-name\">{provider.label}</span>\n            <span class=\"provider-kind\">{provider.kind}</span>\n          </div>\n          {#if provider.description}\n            <p class=\"provider-description\">{provider.description}</p>\n          {/if}\n          {#if Object.keys(provider.settings ?? {}).length}\n            <dl>\n              {#each Object.entries(provider.settings) as [key, value] (key)}\n                <div class=\"provider-setting\">\n                  <dt>{key}</dt>\n                  <dd>{value}</dd>\n                </div>\n              {/each}\n            </dl>\n          {:else}\n            <p class=\"hint\">No settings captured.</p>\n          {/if}\n          <div class=\"provider-actions\">\n            {#if provider.id === defaultProvider.id}\n              <span class=\"hint\">Default provider</span>\n            {:else}\n              <button\n                type=\"button\"\n                class=\"remove-btn\"\n                on:click={() => handleRemoveProvider(provider.id)}\n                disabled={removeStatus === 'removing'}\n              >\n                {removingProviderId === provider.id ? 'Removing…' : 'Remove'}\n              </button>\n            {/if}\n          </div>\n        </li>\n      {/each}\n    </ul>\n  </section>\n</main>\n\n<style>\n  .settings-layout {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding: 2rem 1rem 4rem;\n    background: linear-gradient(135deg, #0f172a, #1e293b);\n    color: #e2e8f0;\n  }\n\n  .settings-layout[data-variant='modal'] {\n    min-height: auto;\n    max-height: min(90vh, 960px);\n    overflow-y: auto;\n    padding: 1.5rem;\n    background: transparent;\n    gap: 1.5rem;\n  }\n\n  .settings-layout[data-variant='modal'] .panel {\n    margin: 0;\n    max-width: none;\n  }\n\n  .panel {\n    background: rgba(15, 23, 42, 0.85);\n    border-radius: 1rem;\n    padding: 2rem;\n    box-shadow: 0 20px 40px rgba(15, 23, 42, 0.35);\n    border: 1px solid rgba(148, 163, 184, 0.1);\n    max-width: 640px;\n    margin: 0 auto;\n  }\n\n  h1,\n  h2 {\n    margin-bottom: 0.5rem;\n  }\n\n  .intro {\n    margin: 0 0 1.5rem;\n    color: #94a3b8;\n    line-height: 1.5;\n  }\n\n  .stack {\n    display: flex;\n    flex-direction: column;\n    gap: 1.25rem;\n  }\n\n  .button-row {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.75rem;\n  }\n\n  .field {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  label {\n    font-weight: 600;\n    color: #cbd5f5;\n  }\n\n  select,\n  input,\n  button {\n    font: inherit;\n  }\n\n  select,\n  input {\n    padding: 0.75rem 1rem;\n    border-radius: 0.75rem;\n    border: 1px solid rgba(148, 163, 184, 0.3);\n    background: rgba(148, 163, 184, 0.05);\n    color: inherit;\n    transition: border-color 0.2s ease, box-shadow 0.2s ease;\n  }\n\n  select:focus,\n  input:focus {\n    outline: none;\n    border-color: rgba(96, 165, 250, 0.7);\n    box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.2);\n  }\n\n  button {\n    padding: 0.75rem 1.25rem;\n    border-radius: 0.75rem;\n    border: none;\n    background: linear-gradient(135deg, #38bdf8, #818cf8);\n    color: #0f172a;\n    font-weight: 600;\n    cursor: pointer;\n    transition: transform 0.15s ease, box-shadow 0.15s ease;\n  }\n\n  button:hover:not(:disabled) {\n    transform: translateY(-1px);\n    box-shadow: 0 10px 20px rgba(59, 130, 246, 0.35);\n  }\n\n  button:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  button.secondary {\n    background: rgba(96, 165, 250, 0.1);\n    color: #e2e8f0;\n    border: 1px solid rgba(96, 165, 250, 0.4);\n  }\n\n  .hint {\n    color: #94a3b8;\n    font-size: 0.875rem;\n  }\n\n  .error {\n    color: #fca5a5;\n    font-size: 0.9rem;\n  }\n\n  .success {\n    color: #34d399;\n    font-size: 0.9rem;\n  }\n\n  .provider-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .provider-list li {\n    border: 1px solid rgba(148, 163, 184, 0.1);\n    border-radius: 0.75rem;\n    padding: 1rem 1.25rem;\n    background: rgba(15, 23, 42, 0.6);\n  }\n\n  .provider-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n    gap: 0.5rem;\n    margin-bottom: 0.5rem;\n  }\n\n  .provider-name {\n    font-weight: 600;\n    color: #e2e8f0;\n  }\n\n  .provider-kind {\n    font-size: 0.85rem;\n    text-transform: uppercase;\n    letter-spacing: 0.08em;\n    color: #38bdf8;\n  }\n\n  .provider-description {\n    margin: 0 0 0.5rem;\n    color: #94a3b8;\n  }\n\n  dl {\n    margin: 0;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    gap: 0.25rem 1rem;\n    font-size: 0.9rem;\n    color: #cbd5f5;\n  }\n\n  .provider-setting dt {\n    font-weight: 500;\n    text-transform: capitalize;\n    color: #94a3b8;\n  }\n\n  .provider-actions {\n    margin-top: 0.75rem;\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .remove-btn {\n    background: rgba(248, 113, 113, 0.15);\n    border: 1px solid rgba(248, 113, 113, 0.4);\n    color: #fecaca;\n    padding: 0.5rem 0.9rem;\n  }\n\n  .remove-btn:hover:not(:disabled) {\n    box-shadow: 0 10px 20px rgba(248, 113, 113, 0.25);\n  }\n\n  .provider-setting dd {\n    margin: 0;\n    word-break: break-word;\n  }\n\n  @media (min-width: 900px) {\n    .settings-layout[data-variant='page'] {\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: center;\n      align-items: flex-start;\n      gap: 2rem;\n    }\n\n    .settings-layout[data-variant='page'] .panel {\n      flex: 1 1 320px;\n    }\n  }\n</style>\n"],"names":["get","set","event","$.mutable_source","$.set","_a","$.get","_b","$.each","$.untrack","$.bind_select_value","$.event","$.bind_value"],"mappings":"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","x_google_ignoreList":[0,1]}